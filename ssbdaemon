#!/bin/bash -x
# (C) 2022, Onno Benschop, VK6FLAB <cq@vk6flab.com>

# Pass all the parameters to cwdaemon, use these defaults if none specified
if [ $# -eq 0 ]
then
	$0 --cwdevice=null --nofork -i --system=n
	exit
fi

# Update these to reflect your environment
voice_dir=~/audio/Karen
cwdaemon=/usr/sbin/cwdaemon
logfile=~/audio/ssbdaemon.log

# The default audio file extension for the MacOS say output.
audio_extension="aiff"

# Detection strings from the cwdaemon debug output
request="cwdaemon:II: request: "
abort="cwdaemon:II: requested aborting of message"
tune="cwdaemon:II: requested tuning"

# Abstract the play command, since this isn't universal
play_cmd="play"

function make_sound() {
	echo "$(date --rfc-3339=sec): $@" >> "${logfile}"
	"${play_cmd}" -q "$@" -t alsa
}

# Match text to file names
function speak(){
	phrase="$@.${audio_extension}"
	if [ -f "${phrase}" ]
	then
		# An audio file for this entire phrase exists
		make_sound "${phrase}"
	else
		fileList=()
		# Iterate across each word, saying the ones we have, spelling the rest
		while [ $# -gt 0 ]
		do
			if [ -f "$1.${audio_extension}" ]
			then
				# An audio file for this word exists
				fileList+=("$1.${audio_extension}")
			else
				# We use phonetics instead
				while read char
				do
					case "${char}" in
						'.')
							char="decimal"
							;;
						'/')
							char="stroke"
							;;
						'?')
							char="query"
							;;
						' ')
							char="space"
							;;
					esac
					if [ -f "${char}.${audio_extension}" ]
					then
						fileList+=("${char}.${audio_extension}")
					elif [ -f "${char^^}.${audio_extension}" ]
					then
						fileList+=("${char^^}.${audio_extension}")
					elif [ -f "${char,,}.${audio_extension}" ]
					then
						fileList+=("${char,,}.${audio_extension}")
					fi
				done < <(echo -n "$1" | grep -o .) # One letter per line
			fi
			# The audio space between words
			fileList+=("space.${audio_extension}")

			# Process the next word
			shift
		done
		# We don't need to end our phrase with a space
		unset fileList[-1]

		# Play the whole message together
		make_sound "${fileList[@]/#/}"
	fi
}

# Process the message text
function extract_requests(){
	while read line
	do
		message=$(echo -n "${line}" | cut -d'"' -f2)
		speak ${message}
	done < <(stdbuf -oL grep -F "${request}")
}

# If you send an abort signal, the audio stops
function extract_aborts(){
	while read line
	do
		killall -s SIGINT -q "${play_cmd}"
	done < <(stdbuf -oL grep -F "${abort}")
}

# Play a 1 kHz audio tone that allows your tuner to recognise a carrier
function extract_tuning(){
	while read line
	do
		speak tune
	done < <(stdbuf -oL grep -F "${tune}")
}

cd "${voice_dir}"

# Split output into several streams so we can abort whilst audio is playing
"${cwdaemon}" "$@" 2> /dev/null | tee >(extract_aborts) | tee >(extract_tuning) | extract_requests
